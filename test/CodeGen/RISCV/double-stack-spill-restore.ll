; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+d -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32IFD %s

define double @func(double %d, i32 %n) nounwind {
; RV32IFD-LABEL: func:
; RV32IFD:       # BB#0: # %entry
; RV32IFD-NEXT:    addi sp, sp, -64
; RV32IFD-NEXT:    sw ra, 60(sp)
; RV32IFD-NEXT:    sw a1, 52(sp)
; RV32IFD-NEXT:    sw a0, 48(sp)
; RV32IFD-NEXT:    fld ft0, 48(sp)
; RV32IFD-NEXT:    beq a2, zero, .LBB0_2
; RV32IFD-NEXT:  # BB#1: # %if.else
; RV32IFD-NEXT:    fsd ft0, 40(sp)
; RV32IFD-NEXT:    addi a2, a2, -1
; RV32IFD-NEXT:    lui a0, %hi(func)
; RV32IFD-NEXT:    addi a3, a0, %lo(func)
; RV32IFD-NEXT:    lw a0, 40(sp)
; RV32IFD-NEXT:    lw a1, 44(sp)
; RV32IFD-NEXT:    fsd ft0, 8(sp)
; RV32IFD-NEXT:    jalr ra, a3, 0
; RV32IFD-NEXT:    sw a1, 36(sp)
; RV32IFD-NEXT:    sw a0, 32(sp)
; RV32IFD-NEXT:    fld ft0, 32(sp)
; RV32IFD-NEXT:    fld ft1, 8(sp)
; RV32IFD-NEXT:    fadd.d ft0, ft0, ft1
; RV32IFD-NEXT:    fsd ft0, 24(sp)
; RV32IFD-NEXT:    lw a0, 24(sp)
; RV32IFD-NEXT:    lw a1, 28(sp)
; RV32IFD-NEXT:    jal zero, .LBB0_3
; RV32IFD-NEXT:  .LBB0_2: # %return
; RV32IFD-NEXT:    fsd ft0, 16(sp)
; RV32IFD-NEXT:    lw a0, 16(sp)
; RV32IFD-NEXT:    lw a1, 20(sp)
; RV32IFD-NEXT:  .LBB0_3: # %return
; RV32IFD-NEXT:    lw ra, 60(sp)
; RV32IFD-NEXT:    addi sp, sp, 64
; RV32IFD-NEXT:    jalr zero, ra, 0
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.else

if.else:
  %sub = add i32 %n, -1
  %call = tail call double @func(double %d, i32 %sub)
  %add = fadd double %call, %d
  ret double %add

return:
  ret double %d
}
