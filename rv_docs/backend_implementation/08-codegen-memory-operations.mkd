# Codegen support for memory operations

## Prequisite: materializing constants

This set of documentation lists each implementation task in the order it was 
needed. When writing an LLVM backend yourself, it's not always so obvious what 
the next step should be. Often you'll start trying to implement a new feature, 
and at that point discover pre-requisites. In this case, if you started to 
implement memory operations you'd quickly find test cases that require the 
ability to materialize constants (load a constant into a register).

The good news is that implementing support for materialising constants is 
easy, and can be done just by modifying `RISCVInstrInfo.td`. Firstly, a 
pattern to match a signed 12-bit immediate:

    def : Pat<(simm12:$imm), (ADDI X0, simm12:$imm)>;

This is straight forward - a 12-bit immediate is a valid operand to `ADDI`.
For larger immediates, more work is required. You want to generate a 
combination of addi and lui, where addi takes the low 12 bits and lui takes 
the 20 bits. It's actually slightly more complex than that: as it's necessary 
to compensate for the fact the `ADDI` operand will be sign-extended. The 
pattern looks like this:

    def : Pat<(simm32:$imm), (ADDI (LUI (HI20 imm:$imm)), (LO12Sext imm:$imm))>;

Where `HI20` and `LO12Sext` are transformations on the immediate to create the 
correct operand:

		// Extract least significant 12 bits from an immediate value and sign extend
		// them.
		def LO12Sext : SDNodeXForm<imm, [{
		  return CurDAG->getTargetConstant(SignExtend64<12>(N->getZExtValue()),
		                                   SDLoc(N), N->getValueType(0));
		}]>;
		
		// Extract the most significant 20 bits from an immediate value. Add 1 if bit
		// 11 is 1, to compensate for the low 12 bits in the matching immediate addi
		// or ld/st being negative.
		def HI20 : SDNodeXForm<imm, [{
		  return CurDAG->getTargetConstant(((N->getZExtValue()+0x800) >> 12) & 0xfffff,
		                                   SDLoc(N), N->getValueType(0));
		}]>;

## Codegen support for memory operations

Two patterns are required for load and store to match the 1) a load/store of 
an address with no offset and 2) a load/store of an address with offset. The 
latter will be represented by a `SelectionDAG` subtree with an `add` node as 
the operand to the load/store. The following multiclass demonstrates this:

    multiclass LdPat<PatFrag LoadOp, RVInst Inst> {
      def : Pat<(LoadOp GPR:$rs1), (Inst GPR:$rs1, 0)>;
      def : Pat<(LoadOp (add GPR:$rs1, simm12:$imm12)),
                (Inst GPR:$rs1, simm12:$imm12)>;
    }

RISC-V features sign-extending and zero-extending loads ('unsigned') data 
values smaller than word size. We must specify patterns for signext, zeroext, 
and anyext (don't care) loads. A test such as below covers these three cases:

    define i32 @lh(i16 *%a) nounwind {
    ; RV32I-LABEL: lh:
    ; RV32I:       # %bb.0:
    ; RV32I-NEXT:    lh a1, 0(a0)
    ; RV32I-NEXT:    lh a0, 4(a0)
    ; RV32I-NEXT:    jalr zero, ra, 0
      %1 = getelementptr i16, i16* %a, i32 2
      %2 = load i16, i16* %1
      %3 = sext i16 %2 to i32
      ; the unused load will produce an anyext for selection
      %4 = load volatile i16, i16* %a
      ret i32 %3
    }

<!-- Global addresses --!>
